
@model VTracker.Models.WebpageDisplayPublic

@using System.Text;
@using VTracker.Models;

@{
    ViewBag.Title = "::Public Stats::";
    Layout = "~/Views/Shared/_PublicLayout.cshtml";

    string xvaluevisit = "", yvaluevisit = "", yreturnvaluevisit = "", ynewvaluevisit = "", browserlabel = "", browserpoint = "";
    StringBuilder builder = new StringBuilder();
    StringBuilder buildery = new StringBuilder();
    foreach (var point in Model.VisitsData)
    {
        builder.Append("'");
        builder.Append(point.X);
        builder.Append("',");

        buildery.Append(point.Y);
        buildery.Append(",");
    }

    xvaluevisit = builder.ToString().TrimEnd(",".ToCharArray());
    yvaluevisit = buildery.ToString().TrimEnd(",".ToCharArray());
    builder.Clear();
    buildery.Clear();

    foreach (var point in Model.ReturnVisitsData)
    {
        buildery.Append(point.Y);
        buildery.Append(",");
    }
    yreturnvaluevisit = buildery.ToString().TrimEnd(",".ToCharArray());
    buildery.Clear();
    foreach (var point in Model.NewVisitsData)
    {
        buildery.Append(point.Y);
        buildery.Append(",");
    }
    ynewvaluevisit = buildery.ToString().TrimEnd(",".ToCharArray());
    buildery.Clear();
    foreach (var point in Model.BrowserData)
    {
        builder.Append("'");
        builder.Append(point.Label);
        builder.Append("',");

        buildery.Append(point.Percentage);
        buildery.Append(",");
    }

    browserlabel = builder.ToString().TrimEnd(",".ToCharArray());
    browserpoint = buildery.ToString().TrimEnd(",".ToCharArray());

    builder.Clear();
    buildery.Clear();

}

<nav class="navbar navbar-default">
    <div class="container-fluid">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar bar1"></span>
                <span class="icon-bar bar2"></span>
                <span class="icon-bar bar3"></span>
            </button>
            <a class="navbar-brand" href="#">@Model.WebsiteName</a>
        </div>
        <div class="collapse navbar-collapse">
            <ul class="nav navbar-nav">
                <li>
                    <div id="date-range" style="display:inline-block">
                        <div id="date-range-field">
                            <span></span>
                            <a href="#">&#9660;</a>
                        </div>
                        <div id="datepicker-calendar"></div>
                    </div>
                    <input type="hidden" id="starthdn" value="@Model.Start.ToString("yyyy/M/d")" />
                    <input type="hidden" id="endhdn" value="@Model.End.ToString("yyyy/M/d")" />
                    <button class="btn btn-info btn-fill btn-sm" style="display:inline-block" onclick="Go()">Go</button>
                </li>
            </ul>

        </div>
    </div>
</nav>
<div class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="content">
                        <p>@Model.Path</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12" style="max-height:460px;">
                <div class="card">
                    <div class="header">
                        <h4 class="title">@Model.VisitCount Visits</h4>
                        <p class="category">In @Model.VisitChartDescription</p>
                    </div>
                    <div class="content">
                        <div id="chartVisit" class="ct-chart ct-perfect-fourth"></div>
                        <div class="footer">
                            <div class="chart-legend">
                                <i class="fa fa-circle text-info"></i> All
                                <i class="fa fa-circle text-danger"></i> Return
                                <i class="fa fa-circle text-warning"></i> New
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12" style="max-height:460px;">
                <div class="card">
                    <div class="header">
                        <h4 class="title">Browsers</h4>
                        <p class="category">In @Model.VisitChartDescription</p>
                    </div>
                    <div class="content">
                        <div id="chartPreferences" class="ct-chart ct-perfect-fourth"></div>
                    </div>
                </div>
            </div>

        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="header">
                        <h4 class="title">Visit Referer</h4>
                        <p class="category">In @Model.VisitChartDescription</p>
                    </div>

                    <div class="content table-responsive table-full-width">
                        <div style="padding:15px">
                            <table class="table table-striped browserdata" id="vrtable">
                                <thead>
                                    <tr>
                                        <th>Referer</th>
                                        <th>Count</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (RefererData item in Model.RefererList.OrderByDescending(t => t.Count))
                                    {
                                        <tr>
                                            @if (string.IsNullOrEmpty(item.Referer))
                                            {
                                                <td>None</td>
                                            }
                                            else
                                            {
                                                <td>
                                                    @Html.Raw(item.Referer)
                                                </td>
                                            }
                                            <td>@item.Count</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12" style="max-height:460px;">
                <div class="card">
                    <div class="header">
                        <h4 class="title">Click Map</h4>
                        <p class="category">In @Model.VisitChartDescription</p>
                    </div>
                    <div class="content" style="text-align:center;">
                        <div style="overflow:auto; max-height:600px;">
                            <img src="@Url.Content(Model.HeatMapPath)" class="img-fluid" />
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>


@section Styles{
    <link href="@Url.Content("~/Content/base.css")" rel="stylesheet" />
    <link href="@Url.Content("~/Content/clean.css")" rel="stylesheet" />
    <link href="//cdn.datatables.net/1.10.19/css/jquery.dataTables.min.css" rel="stylesheet" />
}
@section Scripts{
    <script type="text/javascript" src="@Url.Content("~/Scripts/datepicker.js")"></script>
    <script type="text/javascript" src="//cdn.datatables.net/1.10.19/js/jquery.dataTables.min.js"></script>
    <script>
        $(document).ready(function () {
            
            $("#vrtable").DataTable({
                "lengthMenu": [[10, 25, -1], [10, 25, "All"]],
                "order": [[1, "desc"]]
            });
        /* Special date widget */

        var to = new Date($("#endhdn").val());
            var from = new Date($("#starthdn").val());

        $('#datepicker-calendar').DatePicker({
            inline: true,
            date: [from, to],
            calendars: 3,
            mode: 'range',
            current: new Date(to.getFullYear(), to.getMonth() - 1, 1),
            onChange: function (dates, el) {
                // update the range display
                $('#date-range-field span').text(dates[0].getDate() + ' ' + dates[0].getMonthName(true) + ', ' + dates[0].getFullYear() + ' - ' +
                    dates[1].getDate() + ' ' + dates[1].getMonthName(true) + ', ' + dates[1].getFullYear());
                $("#starthdn").val(dates[0].getFullYear() + "/" + dates[0].getMonthName(true) + "/" + dates[0].getDate());
                $("#endhdn").val(dates[1].getFullYear() + "/" + dates[1].getMonthName(true) + "/" + dates[1].getDate());
            }
        });

        // initialize the special date dropdown field
        $('#date-range-field span').text(from.getDate() + ' ' + from.getMonthName(true) + ', ' + from.getFullYear() + ' - ' +
            to.getDate() + ' ' + to.getMonthName(true) + ', ' + to.getFullYear());

        // bind a click handler to the date display field, which when clicked
        // toggles the date picker calendar, flips the up/down indicator arrow,
        // and keeps the borders looking pretty
        $('#date-range-field').bind('click', function () {
            $('#datepicker-calendar').toggle();
            if ($('#date-range-field a').text().charCodeAt(0) == 9660) {
                // switch to up-arrow
                $('#date-range-field a').html('&#9650;');
                $('#date-range-field').css({ borderBottomLeftRadius: 0, borderBottomRightRadius: 0 });
                $('#date-range-field a').css({ borderBottomRightRadius: 0 });
            } else {
                // switch to down-arrow
                $('#date-range-field a').html('&#9660;');
                $('#date-range-field').css({ borderBottomLeftRadius: 5, borderBottomRightRadius: 5 });
                $('#date-range-field a').css({ borderBottomRightRadius: 5 });
            }
            return false;
        });

        // global click handler to hide the widget calendar when it's open, and
        // some other part of the document is clicked.  Note that this works best
        // defined out here rather than built in to the datepicker core because this
        // particular example is actually an 'inline' datepicker which is displayed
        // by an external event, unlike a non-inline datepicker which is automatically
        // displayed/hidden by clicks within/without the datepicker element and datepicker respectively
        $('html').click(function () {
            if ($('#datepicker-calendar').is(":visible")) {
                $('#datepicker-calendar').hide();
                $('#date-range-field a').html('&#9660;');
                $('#date-range-field').css({ borderBottomLeftRadius: 5, borderBottomRightRadius: 5 });
                $('#date-range-field a').css({ borderBottomRightRadius: 5 });
            }
        });

        // stop the click propagation when clicking on the calendar element
        // so that we don't close it
        $('#datepicker-calendar').click(function (event) {
            event.stopPropagation();
        });
      });
      /* End special page widget */

        function Go() {
            location.href = "@Url.Content(Utility.GetWebpagePublicStatsURL(Model.WebsiteId, Server.UrlEncode(Model.Path)))" + "&start=" + $("#starthdn").val() + "&end=" + $("#endhdn").val();
        }
        var dataVisits = {
            labels: [ @Html.Raw(xvaluevisit) ],
            series: [
                [@Html.Raw(yvaluevisit)],
                [@Html.Raw(ynewvaluevisit)],
                [@Html.Raw(yreturnvaluevisit)]
            ]
        };


        var options = {
            seriesBarDistance: 10,
            axisX: {
                showGrid: false
            },
            height: "245px",
            axisY: {
                onlyInteger: true
            }
        };

        var responsiveLH = [
            ['screen and (max-width: 640px)', {
                axisX: {
                    labelInterpolationFnc: function (value) {
                        return value[0];
                    }
                }
            }]
        ];

        Chartist.Line('#chartVisit', dataVisits, options, responsiveLH);

        var dataPreferences = {
            labels: [@Html.Raw(browserlabel)],
            series: [ [@Html.Raw(browserpoint)] ]
        };

        var optionsPreferences = {
            labelInterpolationFnc: function (value) {
                return value[0]
            }
        };
        //var responsiveOptionsPie = [
        //    ['screen and (min-width: 640px)', {
        //        chartPadding: 30,
        //        labelOffset: 100,
        //        labelDirection: 'explode',
        //        labelInterpolationFnc: function (value) {
        //            return value;
        //        }
        //    }],
        //    ['screen and (min-width: 1024px)', {
        //        labelOffset: 80,
        //        chartPadding: 20
        //    }]
        //];

         new Chartist.Bar('#chartPreferences', dataPreferences, optionsPreferences);

    </script>
}