@page "/report/{id:int}"
@using VisitTracker.Models;
@using VisitTracker.DataContext;
@inject VisitTracker.DataContext.VisitTrackerDBContext context;
@inject ILogger<Report> logger;
@attribute [StreamRendering(true)]

<div class="sticky-top p-2 text-center bg-white">
    
    @if (DisplayInfo != null)
    {
        <h1> @DisplayInfo.VisitCount visits recorded for @DisplayInfo.WebsiteName </h1>
    }
    else
    {
        <h1> Visits recorded</h1>
    }

    <form class="row row-cols-lg-auto g-3 justify-content-center align-items-center my-2" method="get">
        <div class="col-12">
            <DateInput TValue="DateTime" @bind-Value="@Start" EnableMinMax="true" Min="@DateTime.Now.AddYears(-200)" Max="@DateTime.Now" Placeholder="Enter Start Date" />
        </div>
        <div class="col-12">
            <DateInput TValue="DateTime" @bind-Value="@End" EnableMinMax="true" Min="@Start" Max="@DateTime.Now" Placeholder="Enter End Date" />
        </div>
        <div class="col-12">
            <button disabled="@Loading" type="button" @onclick="OnDateChange">
                Go
            </button>
        </div>
    </form>

</div>

@code {

    WebsiteManager websiteRepository;
    VisitManager visitRepository;
    WebpageManager webpageRepository;

    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    bool Loading = false;
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public DateTime Start { get; set; }
    [Parameter]
    public DateTime End { get; set; }

    public WebsiteDisplayPublic DisplayInfo { get; set; }

    public void OnDateChange()
    {
        try
        {
            Loading = true;
            PreloadService.Show(SpinnerColor.Dark, "Loading Data...");
            DisplayInfo = new WebsiteDisplayPublic(Id, Start, new DateTime(End.Year, End.Month, End.Day, 23, 59, 59));
            var w = websiteRepository.GetWebsiteByID(Id);
            if (w != null)
            {
                
                DisplayInfo.WebsiteName = w.Name;
                //var visits = visitRepository.GetVisits(Id, DisplayInfo.Start, DisplayInfo.End);
                //var visitPages = visitRepository.GetVisitAndWebpageByWebsite(Id, DisplayInfo.Start, DisplayInfo.End);
                //var pages = webpageRepository.GetWebpages(w.ID);

                // foreach (var p in pages)
                // {
                //     DisplayInfo.MPages.Add(new WebpageVisits() { Count = visitPages.Count(t => t.Item2.ID == p.ID), Page = p.Path, AbsoluteUrl = $"https://{w.Name}{p.Path}" });
                // }
                // var browsers = new Dictionary<string, int>();
                //var vt = visits.Where(t => t.DateCreated >= DisplayInfo.Start && t.DateCreated <= DisplayInfo.End).ToList();
                DisplayInfo.VisitCount = visitRepository.GetVisitCount(Id, DisplayInfo.Start, DisplayInfo.End);

                // foreach (var item in vt)
                // {
                //     string refstr = "";
                //     string screens = "";
                //     if (!string.IsNullOrEmpty(item.Referer))
                //     {
                //         var referurl = new Uri(System.Net.WebUtility.UrlDecode(item.Referer));
                //         refstr = referurl.Host;
                //     }

                //     if (item.ScreenWidth != null && item.ScreenHeight != null)
                //     {
                //         screens = string.Format("{0} X {1}", item.ScreenWidth, item.ScreenHeight);
                //     }

                //     var rd = DisplayInfo.RefererList.SingleOrDefault(t => t.Referer == refstr);
                //     if (rd != null)
                //     {
                //         rd.Count++;
                //     }
                //     else
                //     {
                //         DisplayInfo.RefererList.Add(new RefererData() { Count = 1, Referer = refstr });
                //     }

                //     var ssd = DisplayInfo.ScreenSizes.SingleOrDefault(t => t.Screen == screens);
                //     if (ssd != null)
                //     {
                //         ssd.Count++;
                //     }
                //     else
                //     {
                //         DisplayInfo.ScreenSizes.Add(new ScreenSizeData() { Count = 1, Screen = screens });
                //     }
                // }
                // var dayStart = DisplayInfo.Start;
                // switch (DisplayInfo.Range)
                // {
                //     case ReportDateRangeCustomType.Day:
                //         while (dayStart <= DisplayInfo.End)
                //         {
                //             var p = new VisitCountChartPoint
                //                 {
                //                     X = dayStart.ToString("h:m tt"),
                //                     Y = vt.Where(t => t.DateCreated >= dayStart &&
                //                     t.DateCreated <= dayStart.AddHours(1)).Count()
                //                 };
                //             DisplayInfo.VisitsData.Add(p);

                //             var np = new VisitCountChartPoint
                //                 {
                //                     X = dayStart.ToString("h:m tt"),
                //                     Y = vt.Where(t => t.DateCreated >= dayStart &&
                //                     t.DateCreated <= dayStart.AddHours(1) && t.LastVisitID.HasValue == false).Count()
                //                 };
                //             DisplayInfo.NewVisitsData.Add(np);

                //             var rp = new VisitCountChartPoint
                //                 {
                //                     X = dayStart.ToString("h:m tt"),
                //                     Y = vt.Where(t => t.DateCreated >= dayStart &&
                //                     t.DateCreated <= dayStart.AddHours(1) && t.LastVisitID.HasValue == true).Count()
                //                 };
                //             DisplayInfo.ReturnVisitsData.Add(rp);

                //             dayStart = dayStart.AddHours(1);
                //         }

                //         DisplayInfo.BrowserData.AddRange(GetBrowserUsage(vt));
                //         break;


                //     case ReportDateRangeCustomType.Days:

                //         while (dayStart <= DisplayInfo.End)
                //         {
                //             var p = new VisitCountChartPoint
                //                 {
                //                     X = dayStart.ToString("MM/d"),
                //                     Y = vt.Where(t => t.DateCreated.Year == dayStart.Year && t.DateCreated.Month == dayStart.Month && t.DateCreated.Day == dayStart.Day).Count()
                //                 };
                //             DisplayInfo.VisitsData.Add(p);

                //             var np = new VisitCountChartPoint
                //                 {
                //                     X = dayStart.ToString("MM/d"),
                //                     Y = vt.Where(t => t.DateCreated.Year == dayStart.Year && t.DateCreated.Month == dayStart.Month && t.DateCreated.Day == dayStart.Day && t.LastVisitID.HasValue == false).Count()
                //                 };
                //             DisplayInfo.NewVisitsData.Add(np);

                //             var rp = new VisitCountChartPoint
                //                 {
                //                     X = dayStart.ToString("MM/d"),
                //                     Y = vt.Where(t => t.DateCreated.Year == dayStart.Year && t.DateCreated.Month == dayStart.Month && t.DateCreated.Day == dayStart.Day && t.LastVisitID.HasValue == true).Count()
                //                 };
                //             DisplayInfo.ReturnVisitsData.Add(rp);

                //             dayStart = dayStart.AddDays(1);
                //         }

                //         DisplayInfo.BrowserData.AddRange(GetBrowserUsage(vt));
                //         break;
                //     case ReportDateRangeCustomType.Months:


                //         while (dayStart <= DisplayInfo.End)
                //         {
                //             var p = new VisitCountChartPoint
                //                 {
                //                     X = dayStart.AddDays(15).ToString("y-M-d"),
                //                     Y = vt.Where(t => t.DateCreated >= dayStart && t.DateCreated < dayStart.AddDays(15)).Count()
                //                 };
                //             DisplayInfo.VisitsData.Add(p);

                //             var np = new VisitCountChartPoint
                //                 {
                //                     X = dayStart.AddDays(15).ToString("y-M-d"),
                //                     Y = vt.Where(t => t.DateCreated >= dayStart && t.DateCreated < dayStart.AddDays(15) && t.LastVisitID.HasValue == false).Count()
                //                 };
                //             DisplayInfo.NewVisitsData.Add(np);

                //             var rp = new VisitCountChartPoint
                //                 {
                //                     X = dayStart.AddDays(15).ToString("y-M-d"),
                //                     Y = vt.Where(t => t.DateCreated >= dayStart && t.DateCreated < dayStart.AddDays(15) && t.LastVisitID.HasValue == true).Count()
                //                 };
                //             DisplayInfo.ReturnVisitsData.Add(rp);

                //             dayStart = dayStart.AddDays(15);
                //         }
                //         DisplayInfo.BrowserData.AddRange(GetBrowserUsage(vt));
                //         break;
                // }
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Report");
        }
        finally
        {
            Loading = false;
            PreloadService.Hide();
        }
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        websiteRepository = new(context);
        visitRepository = new(context);
        webpageRepository = new(context);

        try
        {
            Loading = true;
            PreloadService.Show(SpinnerColor.Dark, "Loading Data...");
            DisplayInfo = new WebsiteDisplayPublic(Id, Start, new DateTime(End.Year, End.Month, End.Day, 23, 59, 59));
            var w = websiteRepository.GetWebsiteByID(Id);
            if (w != null)
            {
                DisplayInfo.WebsiteName = w.Name;
                var visits = visitRepository.GetVisits(Id, DisplayInfo.Start, DisplayInfo.End);
                var visitPages = visitRepository.GetVisitAndWebpageByWebsite(Id, DisplayInfo.Start, DisplayInfo.End);
                //var pages = webpageRepository.GetWebpages(w.ID);

                // foreach (var p in pages)
                // {
                //     DisplayInfo.MPages.Add(new WebpageVisits() { Count = visitPages.Count(t => t.Item2.ID == p.ID), Page = p.Path, AbsoluteUrl = $"https://{w.Name}{p.Path}" });
                // }
                // var browsers = new Dictionary<string, int>();
                //var vt = visits.Where(t => t.DateCreated >= DisplayInfo.Start && t.DateCreated <= DisplayInfo.End).ToList();
                DisplayInfo.VisitCount = visitRepository.GetVisitCount(Id, DisplayInfo.Start, DisplayInfo.End);

                // foreach (var item in vt)
                // {
                //     string refstr = "";
                //     string screens = "";
                //     if (!string.IsNullOrEmpty(item.Referer))
                //     {
                //         var referurl = new Uri(System.Net.WebUtility.UrlDecode(item.Referer));
                //         refstr = referurl.Host;
                //     }

                //     if (item.ScreenWidth != null && item.ScreenHeight != null)
                //     {
                //         screens = string.Format("{0} X {1}", item.ScreenWidth, item.ScreenHeight);
                //     }

                //     var rd = DisplayInfo.RefererList.SingleOrDefault(t => t.Referer == refstr);
                //     if (rd != null)
                //     {
                //         rd.Count++;
                //     }
                //     else
                //     {
                //         DisplayInfo.RefererList.Add(new RefererData() { Count = 1, Referer = refstr });
                //     }

                //     var ssd = DisplayInfo.ScreenSizes.SingleOrDefault(t => t.Screen == screens);
                //     if (ssd != null)
                //     {
                //         ssd.Count++;
                //     }
                //     else
                //     {
                //         DisplayInfo.ScreenSizes.Add(new ScreenSizeData() { Count = 1, Screen = screens });
                //     }
                // }
                // var dayStart = DisplayInfo.Start;
                // switch (DisplayInfo.Range)
                // {
                //     case ReportDateRangeCustomType.Day:
                //         while (dayStart <= DisplayInfo.End)
                //         {
                //             var p = new VisitCountChartPoint
                //                 {
                //                     X = dayStart.ToString("h:m tt"),
                //                     Y = vt.Where(t => t.DateCreated >= dayStart &&
                //                     t.DateCreated <= dayStart.AddHours(1)).Count()
                //                 };
                //             DisplayInfo.VisitsData.Add(p);

                //             var np = new VisitCountChartPoint
                //                 {
                //                     X = dayStart.ToString("h:m tt"),
                //                     Y = vt.Where(t => t.DateCreated >= dayStart &&
                //                     t.DateCreated <= dayStart.AddHours(1) && t.LastVisitID.HasValue == false).Count()
                //                 };
                //             DisplayInfo.NewVisitsData.Add(np);

                //             var rp = new VisitCountChartPoint
                //                 {
                //                     X = dayStart.ToString("h:m tt"),
                //                     Y = vt.Where(t => t.DateCreated >= dayStart &&
                //                     t.DateCreated <= dayStart.AddHours(1) && t.LastVisitID.HasValue == true).Count()
                //                 };
                //             DisplayInfo.ReturnVisitsData.Add(rp);

                //             dayStart = dayStart.AddHours(1);
                //         }

                //         DisplayInfo.BrowserData.AddRange(GetBrowserUsage(vt));
                //         break;


                //     case ReportDateRangeCustomType.Days:

                //         while (dayStart <= DisplayInfo.End)
                //         {
                //             var p = new VisitCountChartPoint
                //                 {
                //                     X = dayStart.ToString("MM/d"),
                //                     Y = vt.Where(t => t.DateCreated.Year == dayStart.Year && t.DateCreated.Month == dayStart.Month && t.DateCreated.Day == dayStart.Day).Count()
                //                 };
                //             DisplayInfo.VisitsData.Add(p);

                //             var np = new VisitCountChartPoint
                //                 {
                //                     X = dayStart.ToString("MM/d"),
                //                     Y = vt.Where(t => t.DateCreated.Year == dayStart.Year && t.DateCreated.Month == dayStart.Month && t.DateCreated.Day == dayStart.Day && t.LastVisitID.HasValue == false).Count()
                //                 };
                //             DisplayInfo.NewVisitsData.Add(np);

                //             var rp = new VisitCountChartPoint
                //                 {
                //                     X = dayStart.ToString("MM/d"),
                //                     Y = vt.Where(t => t.DateCreated.Year == dayStart.Year && t.DateCreated.Month == dayStart.Month && t.DateCreated.Day == dayStart.Day && t.LastVisitID.HasValue == true).Count()
                //                 };
                //             DisplayInfo.ReturnVisitsData.Add(rp);

                //             dayStart = dayStart.AddDays(1);
                //         }

                //         DisplayInfo.BrowserData.AddRange(GetBrowserUsage(vt));
                //         break;
                //     case ReportDateRangeCustomType.Months:


                //         while (dayStart <= DisplayInfo.End)
                //         {
                //             var p = new VisitCountChartPoint
                //                 {
                //                     X = dayStart.AddDays(15).ToString("y-M-d"),
                //                     Y = vt.Where(t => t.DateCreated >= dayStart && t.DateCreated < dayStart.AddDays(15)).Count()
                //                 };
                //             DisplayInfo.VisitsData.Add(p);

                //             var np = new VisitCountChartPoint
                //                 {
                //                     X = dayStart.AddDays(15).ToString("y-M-d"),
                //                     Y = vt.Where(t => t.DateCreated >= dayStart && t.DateCreated < dayStart.AddDays(15) && t.LastVisitID.HasValue == false).Count()
                //                 };
                //             DisplayInfo.NewVisitsData.Add(np);

                //             var rp = new VisitCountChartPoint
                //                 {
                //                     X = dayStart.AddDays(15).ToString("y-M-d"),
                //                     Y = vt.Where(t => t.DateCreated >= dayStart && t.DateCreated < dayStart.AddDays(15) && t.LastVisitID.HasValue == true).Count()
                //                 };
                //             DisplayInfo.ReturnVisitsData.Add(rp);

                //             dayStart = dayStart.AddDays(15);
                //         }
                //         DisplayInfo.BrowserData.AddRange(GetBrowserUsage(vt));
                //         break;
                // }
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "Report");
        }
        finally
        {
            Loading = false;
            PreloadService.Hide();
        }
    }

}
